import pefile
import hashlib

def static_analyzer(file_path):
    """
    Analyzes a PE (Portable Executable) file statically.

    Args:
        file_path (str): The path to the PE file.

    Returns:
        None
    """

    # Read the file in binary mode
    with open(file_path, 'rb') as f:
        data = f.read()

    # Calculate file size and MD5 hash
    file_size = len(data)
    file_hash = hashlib.md5(data).hexdigest()

    # Display file information
    print(f'File size: {file_size} bytes')
    print(f'MD5 Hash: {file_hash}')

    # Analyze PE headers
    pe = pefile.PE(data=data)

    # Display imported DLLs and functions
    print('Imported DLLs and functions:')
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        print(entry.dll.decode('utf-8'))
        for imp in entry.imports:
            print(f'\t{imp.name.decode("utf-8")}')

# Path to the PE file to analyze
file_path = 'path/to/malware.exe'

# Perform static analysis on the PE file
static_analyzer(file_path)

